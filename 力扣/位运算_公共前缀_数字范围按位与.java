package 力扣;

public class 位运算_公共前缀_数字范围按位与 {
    public int rangeBitwiseAnd(int m, int n) {
        int res = 0, help = 1<<30;
        for(int i=31; i>0; i--){
            if((help&m)==(help&n)){
                res += help&m;
            } else {
                return res;
            }
            help >>= 1;
        }
        return res;
    }
}
/*
m的二进制为0011010111...01，
n的二进制为0011011000...10，两者从第25位开始不同。
则在[m,n]范围内的数字的二进制必然有着公共前缀001101...，即26~31位都是相同的，这些位进行&操作，结果不变。
但是因为是连续的区间，则区间内的所有数字的公共前缀之后的每一位（1~25）必然存在0，则进行与操作必然等于0，即所有数进行与操作后1~25位都为0。
所以结果为 001101+25位0。
 */